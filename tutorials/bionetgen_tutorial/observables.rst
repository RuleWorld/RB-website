Observables
===================================================================================================

This block is used to define sums over the concentrations of species sharing
similar attributes, which correspond to the quantities that are measured in
typical biological experiments.  Two standard examples are the total observed
phosphorylation of a protein and the amount of a protein that is co-complexed
with another protein.  For the molecules defined above, examples of these
types are

.. code-block:: ${1:type}

	begin observables
  		Molecules R_phos R(Y~P!?)
  		Molecules A_R    A(SH2!1).R(Y~P!1)
	end observables

The first column of an observable declaration indicates the type of
observable.  Currently, two types are allowed, Molecules and Species.
Molecules is the more common type, and indicates a weighted sum over the
species selected by the pattern(s) defining the group, with the weight given
by the number of matches found for each species.  For example, a dimer
containing two phosphorylated receptors ``R`` would have a weight of 2 in the
observable ``R_phos``.  As you may have guessed, the second column specifies the
name of the observable, while the remaining entries (separated by spaces) are
patterns that select species contributing to the observable.  Patterns are
similar to Species in that they are comprised of one or more molecules and may
contain components, component state labels, and edges.  Unlike Species,
however, they do not have to be fully specified: components of defined
molecules may be missing, state labels of multi-state components may be absent
indicating that they can take on any value, edges names may be given with
wildcards to specify various connectivity, and the molecules in a complex need
not be connected.  It is this incompleteness of specification that allows
Patterns to select a range of species and thus makes them so useful both in
defining observables and reaction rules.  Consider the first observable above,
R_phos.  Because the components l and d of the molecule ``R`` are omitted from the
pattern, the binding state of these components does not affect the match of
the pattern onto a given species.  The only component of ``R`` that affects the
match is ``Y``, which must be in the ``P`` state.  The edge label '?', a wildcard, has
the special meaning that a bond may or may not be present, analogous to the
meaning of the '?' character in regular expressions.  Examples of species that
are matched by this pattern are

.. code-block:: ${1:type}

  R(l,d,Y~P)
  L(r!1).R(l!1,d,Y~P)
  R(l,d,Y~P!1).A(SH2!1)
  R(l,d!1,Y~P).R(l,d!1,Y~P)

The last species on the list would have two matches, because the pattern
appears in both the first and second instance of ``R``.  Thus, the concentration
of this species be weighted by a factor of 2, as approprate for the observable
corresponding to the total phosphorylation of ``R``.

The species (and weights) selected by an observable are output in the groups
block of the NET file created by generate_network (see below).  The groups
block has the format

.. code-block:: ${1:type}

	begin groups
  		R_phos 2,3,5,2*6
	end groups

where the integers in the third column refer to the indices of the selected
species.  Weights are indicated by multipliers in front of an index, e.g., the
species with index 6 has a weight of 2.

The values of observables over a timecourse generated by the
simulate_{ode,ssa} commands are written to a GDAT file (see below).  The
header at the top of the file lists the variable written to each column.