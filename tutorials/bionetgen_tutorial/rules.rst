Reaction Rules
==============================================================================================

Reaction rules are the generators of species and reactions in a BioNetGen
model.  Each rule has four basic elements: reactant patterns, an arrow,
product patterns, and a rate law.  Reactant patterns are used to select a set
of reactant species to which the rule will be applied.  The arrow indicates
whether the rule is applied in the forward direction only or in the forward
and reverse directions.  The product patterns define how the selected species
are transformed by the rule and also act as the species selectors when the
rule is applied in reverse (if applicable).  Rules may add or delete
molecules and edges and may change component state labels.  Components may not
be added or deleted.  The default rate law is the elementary rate law, which
gives the rate of a reaction as the product of a constant factor (the rate
constant) and the reactant concentrations.  Limited support for more complex
rate laws, such as Michaelis-Menton, is also provided.

Let us consider a simple example of a reaction rule for the reversible binding
of ligand to receptor.  Using the molecules we defined above, we can write

.. code-block:: ${1:type}
	
	begin reaction rules
  		L(r) + R(l,d) <-> L(r!1).R(l!1,d) kp1, km1
	end reaction rules

The reactant pattern ``L(r)`` selects ligand molecules that have an unbound ``r``
component.  Since L molecules have only one component, the only species that
is selected by this pattern is ``L(r)``.  When multiple reactant or product
patterns appear in a rule, they are separated by the '+' character.  The
``R(l,d)`` pattern selects ``R`` molecules with unbound l and d components regardless
of the phosphorylation state of the Y component.  It would, for example select
the species ``R(l,d,Y~U)`` and ``R(l,d,Y~P)``.  By specifying the component d and not
indicating any binding state, we are requiring that the ``d`` component be
unbound.  We could have written the rule to be independent of the state of d
by simply omitting it from ``R``, which would allow the ligand to associate with ``R``
molecules that have formed dimers.  The general principle is that reaction
rules should only include molecules, components, states, and edges that are
either required for the reaction to occur or are modified by the reaction.
The bidirectional arrow indicates that the rule is to be applied in
both the forward and reverse directions.  A unidirectional (forward only)
reaction is specified by the '->' arrow.  The rate laws appear after the product
patterns.  For reversible reactions two rate laws are required, separated by
commas.  Here, each rate law is given by a single parameter, indicating that
elementary rate laws are to be used.  Additional arguments may appear after
the rate constants to modify the behavior of the rule, but these will be
discussed in a future tutorial.


Other rate laws
---------------

Other rate laws can be invoked using one of the keywords for the allowed rate
law types followed by a list of parameters in the parenthesis.  The two rate
law types covered here are Sat and MM.  

The reaction

.. code-block:: ${1:type}

	S + E -> P + E Sat(kcat,Km)

will have the rate law, rate= kcat*[S]*[E]/(Km + [S]).  Note that the term in
the denominator must appear first in the reaction rule.   
 
There is also a MM rate law type that gives the rate of the reaction corrected
for the amount of ``S`` bound in the ``ES`` complex (solves quadratic formula for
[S]free).  This will give a closer approximation to the kinetics of the two
elementary processes.  The reaction 

.. code-block:: ${1:type}

	S + E -> P + E MM(kcat,Km)

will have the rate law, rate= kcat*[S]_free*[E]/(Km + [S]_free), where
[S]_free is determined by 

.. code-block:: ${1:type}
	
	[S]_free= 0.5*(([S]-Km-[E]) + ( ([S]-Km-[E])^2 + 4*Km*[S])^(1/2) )


The transformation in the above rule results in two separate species, one
matching the first pattern and one matching the second, being combined into a
single species joined by a new bond between the matched molecule ``L`` component ``r``
and the matched molecule ``R`` component ``l``.  The component ``d`` is not modified, but
it must be in an unbound state for the reaction to occur.  The reverse
transformation involves the breaking of a bond between ``L`` and ``R`` to create two
separate species.  Here are some examples of specific reactions generated by this rule:

.. code-block:: ${1:type}
	
	L(r) + R(l,d,Y~U) -> L(r!1).R(l!1,d,Y~U) kp1
	L(r!1).R(l!1,d,Y~U) -> L(r) + R(l,d,Y~U) km1
	L(r) + R(l,d,Y~P) -> L(r!1).R(l!1,d,Y~P) kp1
	L(r) + R(l,d,Y~P!1).A(SH2!1) -> L(r!2).R(l!2,d,Y~P!1).A(SH2!1) kp1

Note that the '+' operator in the rule above has a restrictive effect:
if the breaking of the bond between ``L`` and ``R`` does not product two separate
species (not joined by any bond), then the rule is not applied and no reaction
is generated.  This is a general property of rules that the number of product
species must equal the number of product patterns of the rule.  Thus,
intramolecular and intermolecular dissociation must be handled as separate
rules. For example, suppose that ``A`` and ``B`` joined by a direct bond in a complex,
but may also be joined indirectly by unspecified molecules.  In the latter
case, breaking of the direct bond between ``A`` and ``B`` would not break up the
complex containing both.  If the only rule given for the dissociation of the
direct bond were

.. code-block:: ${1:type}

	A(b!1).B(a!1) -> A(b!1) + B(a!1) kmAB
 
the bond between ``A`` and ``B`` would not break inside a complex containing an
indirect link.  To allow this bond to break, we would need the additional rule

.. code-block:: ${1:type}

  A(b!1).B(a!1) -> A(b).B(a) kmAB

for intramolecular bond dissociation.  In the future, we might provide syntax
allowing both types of bond breakage to be specified in a single rule.

Let us now consider a rule for receptor dimerization that introduces some new
syntactic features:

.. code-block:: ${1:type}

	R(l!+,d) + R(l!+,d) <-> R(l!+,d!2).R(l!+,d!2) kp2, km2

The rule specifies that two species each containing a receptor with a bound ``l``
component and an unbound ``d`` component may be joined by a bond connecting the
unbound d components.  The fact the l must be bound is specified by the edge
label ``!+``, where the ``+`` character must match one or more bonds, analogous to its
meaning within a regular expression.  Because this rule is symmetric on both
the reactant and product sides (with respect to interchange of the ``R`` molecule
patterns), each set of possible reactants will have two identical matches
causing each reaction to be generated twice.  In the past it was necessary to
add a multiplicative factor of 0.5 to forward and reverse rate constants, but
this is no longer necessary as BioNetGen automatically adjusts for the
symmetry of reaction rules [see Faeder 2005a or Blinov 2005].

As a final example we consider two rules that change the phosphorylation state
of the receptor:

.. code-block:: ${1:type}

	R(d!+,Y~U) -> R(d!+,Y~P) p1 
	R(Y~P) -> R(Y~U) d1 

The first rule states that the phosphorylation reaction occurs only when the
receptor dimerization domain (``d``) is bound, i.e. phosphorylation occurs within
a dimer. The second rule allows dephosphorylation to take place regardless of
the state of the dimerization domain (or any other component of ``R``) provided
that the ``Y`` component is unbound.  Similarly, the first rule also requires that
``Y`` is unbound when it is phosphorylated, presumably because the catalytic
domain of the kinase or phosphatase must be able to access the tyrosine
residue.  Let's consider application of the first rule to the complex
``L(r!1).R(l!1,d!2,Y~U).L(r!1).R(l!1,d!2,Y~U)``, a dimer of two ligand-bound
unphosphorylated receptors.  The reactant pattern ``R(d!+,Y~U)`` has two instances
in this complex because it matches either the first or second receptor.  Thus,
the rule will be applied twice to this species, each generating an instance of the reaction

.. code-block:: ${1:type}

	L(r!1).R(l!1,d!2,Y~U).L(r!1).R(l!1,d!2,Y~U) -> \
	L(r!1).R(l!1,d!2,Y~U).L(r!1).R(l!1,d!2,Y~P) p1

Note that the '\'character at the end of the line can be used to continue a
single line, which is necessary because all block entries must be contained on
a single line in both BNGL and NET files.  If the species index of the
reactant and product are 20 and 21 respectively, this reaction (index 43)
would appear in the NET file specifying the reaction network as

.. code-block:: ${1:type}
	
	43 20 21 2*p1

indicating that reaction 43 is the unimolecular reaction transforming species
20 into species 21 with rate 2*p1*[S20].  The square brackets indicate
concentration of species 20.  The multiplicative factor of 2 arises because
there are two ways this transformation can occur, and unlike the symmetric
case above, these paths correspond to distinct physical mechanisms.

